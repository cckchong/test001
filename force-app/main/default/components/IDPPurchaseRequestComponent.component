<apex:component >

<!-- Not used because of the State Size------

 controller="IDPPurchaseRequestCtrl">
    <apex:attribute name="pid" description="Purchase Request ID" type="String" required="false"/>

    <script>
        var $feed= null;
        var $accordion = null;
        //var $PRTable = null;        
        var $dateFormat = null;
        var $currencyOriginal = null;
        var $currencyLocal = null;
        var $singleSelect = null;
        var $content = null;
        var $estorig = null;
        var $estlocal = null;
        var $posnum = null;
        var $tab1 = null;
        var $progressbar = null;
        var $approvalDialog = null;
        var $confirmApproval = null;
        var $confirmRejection = null;
        //var PRTableInit = null;
    </script>
    
    <script>
        $(function() {initVariable();init();});
        
        function initVariable(){
            $feed = $("#feed");
            $accordion = $(".accordion");
            //$PRTable = $("#PRTable");
            $tabs = $("#tabs");
            $dateFormat = $(".dateFormat");
            $currencyOriginal = $(".original");
            $currencyLocal = $(".local");
            $singleSelect = $(".singleSelect");
            $content = $("#content");
            $estorig = $(".estorig");
            $estlocal = $(".estlocal");
            $posnum = $(".posnum");
            $tab1 = $("#tab1");
            $progressbar = $(".progressbar");   
            $approvalDialog = $("#approvalDialog");         
            $confirmApproval = $("#confirmApproval");
            $confirmRejection = $("#confirmRejection");
        }
        
        function init(){
            
            $tabs.tabs();             
            //PRTableInit = dataTableInitSetting();
            //$PRTable.DataTable(PRTableInit);
            $dateFormat.fadeOut(0);
            $currencyLocal.fadeOut(0);
            $singleSelect.select2({placeholder: "Select"});
            $content.fadeIn(0);
            $accordion.accordion({ 
                collapsible: true 
            });
            $feed.accordion({ 
                collapsible: true,
                active: false
            });
            posNumInput();
            
            $approvalDialog.dialog({
                autoOpen: false,
                height: 280,
                width: 500
            });            
            
        }
        
        function posNumInput(){
            $(".posnum").keydown(function (e) {
                // Allow: backspace, delete, tab, escape, enter and .
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                     // Allow: Ctrl+A
                    (e.keyCode == 65 && e.ctrlKey === true) ||
                     // Allow: Ctrl+C
                    (e.keyCode == 67 && e.ctrlKey === true) ||
                     // Allow: Ctrl+X
                    (e.keyCode == 88 && e.ctrlKey === true) ||
                     // Allow: home, end, left, right
                    (e.keyCode >= 35 && e.keyCode <= 39)) {
                         // let it happen, don't do anything
                         return;
                }
                // Ensure that it is a number and stop the keypress
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });
        }
        
        function dataTableInitSetting(){
            return {                
                "scrollY": 265,                
                "scrollX": true,
                "scrollCollapse": true,
                "paging": false,
                "bFilter": false, 
                "bInfo": false,
                "bSort" : false
            };
       }
       
       function changeCurrency(val){
           $currencyLocal.fadeOut(0);
           $currencyOriginal.fadeOut(0);
           if(val == 'o'){
               $currencyOriginal.fadeIn(0);               
           }
           if(val == 'l'){
               $currencyLocal.fadeIn(0);
           }
       }
       
       function detailAction(action){
           initVariable();
           //$singleSelect.select2();
           $singleSelect.select2({placeholder: "Select"});
           posNumInput();
           if(action == 'A'){
               changeCurrency('o')
           }
           if(action == 'D'){
               changeCurrency('o')
           }
       }
       
       function changeSupplier(obj, val){
           //alert(obj);
           //alert(val.value);
           $("."+obj).val(val.value);
       }

       function changePCSupplier(obj, val){
           $("."+obj).val(val.value).change();
       }       
       function changeSTDExchangeRate(val){
           $estorig.fadeOut(0);
           $estlocal.fadeOut(0);
           if(val == 'estorig'){
               $estorig.fadeIn(0);
           }
           if(val == 'estlocal'){
               $estlocal.fadeIn(0);
           }
       }
       
       function directFullfillmentAction(obj) {
            $(".supplier_select_"+obj).change();
            InitialdirectFullfillmentAction(obj);
            detailAction('D');
       }       
       function InitialdirectFullfillmentAction(obj) {
            
           var isDisable = $(".IsDirectFullfillment_"+obj).prop("checked");
           $(".currency_"+obj).select2({placeholder: "Select"});
           $(".supplier_select_"+obj).select2({placeholder: "Select"});
           //$(".supplier_select_"+obj).change();
           $(".currency_"+obj).prop("disabled", isDisable); 
           $(".price_"+obj).prop("disabled", isDisable); 
           $(".supplier_select_"+obj).prop("disabled", isDisable); 

       }
       
       function deleteLineAction(action) {
           if(action == "CL") {
                $tab1.hide();
                $progressbar.show();      
           }
           if(action == "CP") {
                $tab1.show();
                $progressbar.hide();      
           }
       
       }       
    </script>
    <script>
            function prepareFileUploads(evt){
                files = evt;
                if ( '{ !ea.id}' != ''){
                    uploadfilesAction('{!pid}', false)
                }
                else{
                    filesDisplay(evt);
                }
            }
            function filesDisplay(evt){
                var fname = '0';
                var files = evt.files; 
                if (files.length > 0){
                    fname = files.length + ' file(s)';
                }
                //$('#AllFilename').html(fname);
            }
            
            function uploadfiles(pid){                
                uploadfilesAction(pid, true);                
            }
            
            function uploadfilesAction(pid, redirect){
                var ufiles = files;  
                if(!Boolean(pid)|| !Boolean(ufiles) ){
                    //go();
                }
                if(pid != '' && ufiles != null){                    
                    ufiles = files.files;
                    if (ufiles.length == 0){
                        return;
                    }
                    //disablebtns();
                    uploadfileAction (0, ufiles, pid, redirect);
                }
            }
            
            function uploadfileAction(index,  ufiles, pid, redirect){                
                var currentFile = null;
                var blobChunk = null;
                var byteChunkArray = new Array();
                var base64value = '';
                var attachid = '';
                var islast = false;
                base64value = '';
                attachid = '';
                currentFile = ufiles[index];
                byteChunkArray = byteChunk(currentFile);
                if (index == ufiles.length -1){
                    islast = true;
                }
                filecontent(index , ufiles, currentFile, byteChunkArray, base64value, attachid, pid, islast, redirect);
              
            }
            
            function byteChunk(currentFile){
                var byteChunkArray = new Array(); 
                var CHUNK_SIZE = 180000;
                var numOfFullChunks = 0;
                var remainderBytes = 0;
                var startByte = 0;
                var endByte = CHUNK_SIZE - 1;
                if(currentFile.size < CHUNK_SIZE){
                    byteChunkArray.push(currentFile.slice(0, currentFile.size + 1));                    
                }
                else{
                    
                    numOfFullChunks = Math.floor(currentFile.size / CHUNK_SIZE);
                    remainderBytes = currentFile.size % CHUNK_SIZE;
                    for(var i = 0; i < numOfFullChunks; i++){
                        byteChunkArray.push(currentFile.slice(startByte, endByte+1));
                        startByte = endByte + 1;
                        endByte += CHUNK_SIZE;
                    }
                    startByte = currentFile.size - remainderBytes;
                    endByte = currentFile.size;
                    byteChunkArray.push(currentFile.slice(startByte, endByte));
                }
                return byteChunkArray;
            }
            
            
            function filecontent(index , ufiles, currentFile, byteChunkArray, base64value, attachid, pid, islast, redirect){
                 if ( byteChunkArray.length == 0 ){
                     if (islast && redirect){
                         //go();
                         alert(2);
                     }
                     if (islast && !redirect){
                         location.reload();
                         //enablebtn();
                         try {
                            $('#dialog').dialog('destroy');
                         }catch(err) {}              
                         refreshAttachment();
                     }
                     if (!islast){
                         uploadfileAction(index+1, ufiles, pid, redirect);
                     }
                     return '';
                 }
                 
                 var reader = new FileReader(); 
                 if (!FileReader.prototype.readAsBinaryString) {
                     reader.readAsArrayBuffer(byteChunkArray[0]);
                 }else{
                     reader.readAsBinaryString(byteChunkArray[0]);
                 }
                 
                 reader.onloadend = function(evt){
                     if(evt.target.readyState == FileReader.DONE){
                         var fileData = evt.target.result;
                         if (!FileReader.prototype.readAsBinaryString) {
                             
                             var bytes = new Uint8Array(fileData);
                             var binaryText = '';
                             for (var pos= 0; pos < bytes.byteLength; pos++) {
                                 binaryText += String.fromCharCode( bytes[pos] );
                             }
                             base64value = window.btoa(binaryText); 
                         }else{
                             base64value = window.btoa(fileData ); 
                         }                        
                         Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.IDPPurchaseRequestCtrl.uploadFileAction}',
                            currentFile.name, currentFile.type, base64value, attachid, pid,
                            function(result, event){                                
                                if (event.status){
                                     byteChunkArray.shift();
                                     attachid = result;
                                     filecontent(index, ufiles, currentFile, byteChunkArray, base64value , attachid, pid, islast, redirect);                                     
                                }
                                else if (event.type === 'exception'){
                                    alert(event.message);
                                    //enablebtn();
                                }
                                else{
                                    alert(event.message);
                                    //enablebtn();
                                }
                            }, 
                            {escape: true,}
                           );
                         return '';
                     }
                 }
            } 
        
        
        
        
    </script>
    
    <script>
    
        function saveReceivedOnComplete(pIsDisplayedMessage) {
            if(pIsDisplayedMessage) {
                return false;
            }
            else {
                window.location = "/apex/IDPPurchaseRequestVFP?prid="+ "{!pid}"+"&mode="+ "v";

            }
        }
        
        function displayApprovalCommentOnClick(mode) {
            if(mode == 'A') {
                $confirmApproval.fadeIn(0);
                $confirmRejection.fadeOut(0);
                
            }
            else if(mode == 'R') {
                $confirmApproval.fadeOut(0);
                $confirmRejection.fadeIn(0);
                
            }
            $approvalDialog.dialog("open");
        }
        
        function hideApprovalCommentOnClick() {
            $approvalDialog.dialog("close");
        }        
    </script>
    
-->
</apex:component>